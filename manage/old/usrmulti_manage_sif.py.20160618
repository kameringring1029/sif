#!/usr/bin/python
# -*- coding: utf-8 -*-


time_tweet =""
username =""

import cgi
import os, sys
import cv2
import numpy as np
import commands
import MySQLdb
import time
import datetime
import tweepy
import urllib

time_format="%Y-%m-%d %H:%M:%S"


################
## POST TWEET ##
################
def post_tweet(message):
	#認証を行う
	consumer_key = "E7PLfevrHNVI9ozuQlF6xXDgG"
	consumer_secret = "CfobRZOWqXvPytSbn3zUDklsS81bUWXJjd3RIEYcUKnOnd1kQx"
	access_token="721661385977909249-wtx82HRTTSzm1mJgOnW0vbjR13tWCOr"
	access_secret = "uFeckhWHjU5JHBOGIvPLEHQgSbfRk3SjrxUBMyLNRNh7X"
	auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
	auth.set_access_token(access_token, access_secret)
	api = tweepy.API(auth)
	
	#投稿する
	api.update_status(message)


##################
## GET TWEET SC ##
##################
def get_tweet_sc():
	global time_tweet
	global username

	#認証を行う
	consumer_key = "E7PLfevrHNVI9ozuQlF6xXDgG"
	consumer_secret = "CfobRZOWqXvPytSbn3zUDklsS81bUWXJjd3RIEYcUKnOnd1kQx"
	access_token="721661385977909249-wtx82HRTTSzm1mJgOnW0vbjR13tWCOr"
	access_secret = "uFeckhWHjU5JHBOGIvPLEHQgSbfRk3SjrxUBMyLNRNh7X"
	auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
	auth.set_access_token(access_token, access_secret)
	api = tweepy.API(auth)
	
	if api.home_timeline()[0].text.find('@sif_notify_bot') != -1 :
		tweetimage = api.home_timeline()[0].entities['media'][0]['media_url'] + ":orig"
		time_tweet = api.home_timeline()[0].created_at
		time_tweet += datetime.timedelta(hours = 9)
		time_tweet = time_tweet.strftime(time_format)

		username = api.home_timeline()[0].author.screen_name

		print "time_tweet:"+time_tweet
		print "author:@"+username

		filename = 'tweetsc.jpg'

		urllib.urlretrieve(tweetimage, os.path.join('/var/www/up/', filename))

	else:
		print "no update info"

	if time_tweet != '':
		print "get SC from tweet"
		return filename
	else:
		return 0



################
## GET BORDER ##
################
def get_border():
	print "get_border"

	#認証を行う
	consumer_key = "E7PLfevrHNVI9ozuQlF6xXDgG"
	consumer_secret = "CfobRZOWqXvPytSbn3zUDklsS81bUWXJjd3RIEYcUKnOnd1kQx"
	access_token="721661385977909249-wtx82HRTTSzm1mJgOnW0vbjR13tWCOr"
	access_secret = "uFeckhWHjU5JHBOGIvPLEHQgSbfRk3SjrxUBMyLNRNh7X"
	auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
	auth.set_access_token(access_token, access_secret)
	api = tweepy.API(auth)
	
	tweet = api.user_timeline("llborder_update")[0].text
	line = tweet.split("\n")
	double = line[1].split(u'：')[1].split("pts")[0]
	single = line[2].split(u'：')[1].split("pts")[0]
	time = line[3].split(u'：')[1].split(" (")[0]

	if tweet != '':
		return [time, double, single]
	else:
		return [0, 0, 0]


###############
## LP NOTIFY ##
###############
def tweet_lp():
	print "tweet_lp"

	connector = MySQLdb.connect(host="localhost", db="sif_event", user="web", passwd="password", charset="utf8")
	cursor = connector.cursor()


	sql = "select * from status_multiuser where time=(select max(time) from status_multiuser)"
	print "[SQL]:"+sql
	cursor.execute(sql)
	result = cursor.fetchall()
	for row in result:
		db_time, rank, lp_now, lp_max, exp_now, exp_max, pop_flag, username = row
		if pop_flag == 1:
			message = str(datetime.datetime.now())+" LP:"+str(lp_max)+"/"+str(lp_max)+"(max)"
			post_tweet(message)
			print "[Tweet]POST:"+message
			sys.exit()
		else:
			timediff = int(time.mktime(datetime.datetime.now().timetuple())) - int(time.mktime(db_time.timetuple()))
			restore_lp = timediff / 60 / 6
			realtime_lp = lp_now + restore_lp
			if realtime_lp >= lp_max:
				message = "@"+username+" "+str(datetime.datetime.now())+" LP overflow!"
				post_tweet(message)
				print "[Tweet]POST:"+message
				sql = "update status_multiuser set notice_flag=1 order by time desc limit 1"
				print "SQL:"+sql
				cursor.execute(sql)
			else:
				message = str(datetime.datetime.now())+" LP:"+str(realtime_lp)+"/"+str(lp_max)
				post_tweet(message)
				print "[Tweet]POST:"+message
				

	connector.commit()
	cursor.close()
	connector.close()



	

################
## 色抽出関数 ##
################
def extract_color( src, h_th_low, h_th_up, s_th, v_th ):

	hsv = cv2.cvtColor(src, cv2.COLOR_BGR2HSV)
	h, s, v = cv2.split(hsv)

	if h_th_low > h_th_up:
		ret, h_dst_1 = cv2.threshold(h, h_th_low, 255, cv2.THRESH_BINARY) 
		ret, h_dst_2 = cv2.threshold(h, h_th_up,  255, cv2.THRESH_BINARY_INV)
		
		dst = cv2.bitwise_or(h_dst_1, h_dst_2)

	else:
		ret, dst = cv2.threshold(h,   h_th_low, 255, cv2.THRESH_TOZERO) 
		ret, dst = cv2.threshold(dst, h_th_up,  255, cv2.THRESH_TOZERO_INV)

		ret, dst = cv2.threshold(dst, 0, 255, cv2.THRESH_BINARY)
		
	ret, s_dst = cv2.threshold(s, s_th, 255, cv2.THRESH_BINARY)
	ret, v_dst = cv2.threshold(v, v_th, 255, cv2.THRESH_BINARY)

	dst = cv2.bitwise_and(dst, s_dst)
	dst = cv2.bitwise_and(dst, v_dst)

	return dst




##############################
## イベントスクショ解析関数 ##
##############################
def analyze_eventSC(filename):
	print "analyze_eventSC"

	image = cv2.imread(os.path.join('/var/www/up/', filename))

	height_orig = image.shape[0]
	width_orig = image.shape[1]

	## ポイント記載部分トリミング
	trim_image = image[height_orig*0.77:height_orig*0.81, width_orig*0.15:width_orig*0.27]
	cv2.imwrite(os.path.join('/var/www/up/', 'trim_point-test.png'), trim_image)
	## ピンクで２値化（累計ポイント取得用）
	if height_orig > 900:
		pink_image = extract_color(trim_image, 160,  0, 80,  232)
	else:
		pink_image = extract_color(trim_image, 160,  0, 100,  3)
	cv2.imwrite(os.path.join('/var/www/up/', 'pink_image-test.png'), pink_image)
	commands.getoutput("tesseract /var/www/up/pink_image-test.png /var/www/up/now-test -psm 7 nobatch digits")


	## item用ネガポジ解析
	look_up_table = np.ones((256, 1), dtype = 'uint8' ) * 0
	for i in range(256):
		look_up_table[i][0] = 255 - i
	## item記載部分トリミング
#	trim_image = image[870:920, 350:500]
	trim_image = image[height_orig*0.807:height_orig*0.853, width_orig*0.215:width_orig*0.306]
	img_negaposi = cv2.LUT(trim_image, look_up_table)

    # グレースケールに変換
	gray_image = cv2.cvtColor(img_negaposi, cv2.COLOR_BGR2GRAY)
		 
	# 二値変換
	thresh = 250
	max_pixel = 255
	ret, gray_image = cv2.threshold(gray_image,thresh,max_pixel,cv2.THRESH_BINARY)

	cv2.imwrite(os.path.join('/var/www/up/', 'trim_image-test.png'), trim_image)
	cv2.imwrite(os.path.join('/var/www/up/', 'gray_image-test.png'), gray_image)
	commands.getoutput("tesseract /var/www/up/gray_image-test.png /var/www/up/item-test -psm 7 nobatch digits")




########################
## ゲーム画面切取関数 ##
########################
def trim_frame_by_SC(filename):
	
	image = cv2.imread(os.path.join('/var/www/up/', filename))

	## ２値化（アプリ画面枠検知用）
	apl_image = extract_color(image, 0,  180, 10,  10)
	cv2.imwrite(os.path.join('/var/www/up/', 'apl_image.png'), apl_image)

	# 輪郭を取得
	contours, hierarchy = cv2.findContours(apl_image, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

	# i = 1 は画像全体の外枠になるのでカウントに入れない
	x1 = []
	y1 = []
	x2 = []
	y2 = []
	for i in range(1, len(contours)):
	# ret の中身は (x, y, w, h)
		ret = cv2.boundingRect(contours[i])
		x1.append(ret[0])
		y1.append(ret[1])
		x2.append(ret[0] + ret[2])
		y2.append(ret[1] + ret[3])

	x1_min = min(x1)
	y1_min = min(y1)
	x2_max = max(x2)
	y2_max = max(y2)

	## トリミング
	trim_image = image[y1_min:y2_max, x1_min:x2_max]
	cv2.imwrite('/var/www/up/only_apl.jpg', trim_image)

#	for j in range(0, len(x1)):
#		cv2.rectangle(image, (x1[j], y1[j]), (x2[j], y2[j]), (0, 255, 0), 2)




########################
## スクショLP解析関数 ##
########################
def analyze_LP(filename):
	print "analyze_LP"

	image = cv2.imread(os.path.join('/var/www/up/', filename))
	height_orig = image.shape[0]
	width_orig = image.shape[1]


	## ポイント記載部分トリミング
	trim_image = image[0:height_orig*0.1, width_orig*0.43:width_orig]
	cv2.imwrite(os.path.join('/var/www/up/', 'status_image-test.png'), trim_image)

	rank_image = image[height_orig*0.045:height_orig*0.090, width_orig*0.46:width_orig*0.54]
	cv2.imwrite(os.path.join('/var/www/up/', 'rank_image-test.png'), rank_image)
	commands.getoutput("tesseract /var/www/up/rank_image-test.png /var/www/up/rank-test -psm 7 nobatch digits")
	lp_image = image[height_orig*0.067:height_orig*0.099, width_orig*0.73:width_orig*0.81]
	cv2.imwrite(os.path.join('/var/www/up/', 'lp_image-test.png'), lp_image)
    # グレースケールに変換
	lp_image = cv2.cvtColor(lp_image, cv2.COLOR_BGR2GRAY)
	cv2.imwrite(os.path.join('/var/www/up/', 'lp_image-test.png'), lp_image)
	commands.getoutput("tesseract /var/www/up/lp_image-test.png /var/www/up/lp-test -psm 7 nobatch digits")

	exp_image = image[height_orig*0.067:height_orig*0.099, width_orig*0.55:width_orig*0.70]
	cv2.imwrite(os.path.join('/var/www/up/', 'exp_image-test.png'), exp_image)
	commands.getoutput("tesseract /var/www/up/exp_image-test.png /var/www/up/exp-test -psm 7 nobatch digits")




########################
## ユーザ情報更新関数 ##
########################
def update_statusTable():
	print "update_statusTable"

	global time_tweet
	global username

	try:

		connector = MySQLdb.connect(host="localhost", db="sif_event", user="web", passwd="password", charset="utf8")
		cursor = connector.cursor()

		## point情報読み込みとDB更新
		f = open('/var/www/up/rank-test.txt')
		rank = f.readline().rstrip() # 1行を読み込む
		rank = rank.replace(" ","")
		f.close	
		f = open('/var/www/up/lp-test.txt')
		lp = f.readline().rstrip() # 1行を読み込む
		lpnow,lpmax = lp.split(" ")
		f.close	
#		if lpnow >= lpmax:
#			notice_flag = "TRUE"
#		else:
#			notice_flag = "FALSE"
		notice_flag = "FALSE"
		f = open('/var/www/up/exp-test.txt')
		exp = f.readline().rstrip() # 1行を読み込む
		expnow,expmax = exp.split(" ")
		f.close	

		sql = "insert into status_multiuser values('"+time_tweet+"',"+rank+","+lpnow+","+lpmax+","+expnow+","+expmax+","+notice_flag+","+username+")"
		print "[SQL]"+ sql 
			
		cursor.execute(sql)


		## DB commit and close
		connector.commit()
		cursor.close()
		connector.close()
		print " DB updated." 


	except MySQLdb.Error, e:
		try:
			print "MySQL Error [%d]: %s" % (e.args[0], e.args[1])
		except IndexError:
			print "MySQL Error: %s" % str(e)







##############################
## イベントポイント更新関数 ##
##############################
def update_eventTable(event):
	print "update_eventTable"

	global time_tweet

	try:

		connector = MySQLdb.connect(host="localhost", db="sif_event", user="web", passwd="password", charset="utf8")
		cursor = connector.cursor()

		event_name = event

		#現在時刻の取得と整形
		localtime = time.strftime(time_format)
		localtime = time.strftime(time_format, time.localtime())
	
		## point情報読み込みとDB更新
		f = open('/var/www/up/now-test.txt')
		nowpoint = f.readline().rstrip() # 1行を読み込む
		f.close	
		f = open('/var/www/up/item-test.txt')
		nowitem = f.readline().rstrip() # 1行を読み込む
		f.close	

		border_time, double, single = get_border()
		print border_time+"/"+double+"/"+single

		if time_tweet=='':
			time_tweet = "2016/"+border_time+":00"

		if nowitem=='':
			nowitem = 0

		sql = "insert into "+event_name+" values('"+time_tweet+"',"+str(nowpoint)+","+str(nowitem)+","+str(double)+","+str(single)+")"
		print "[SQL]"+ sql 
			
		cursor.execute(sql)


		## DB commit and close
		connector.commit()
		cursor.close()
		connector.close()
		print " DB updated." 


	except MySQLdb.Error, e:
		try:
			print "MySQL Error [%d]: %s" % (e.args[0], e.args[1])
		except IndexError:
			print "MySQL Error: %s" % str(e)


##############################
## イベントポイント参照関数 ##
##############################
def show_Table(event):


	try:

		connector = MySQLdb.connect(host="localhost", db="sif_event", user="web", passwd="password", charset="utf8")
		cursor = connector.cursor()

		event_name = event

	
 		##select
		sql = "select * from " + event_name
		print "[SQL]"+sql
		cursor.execute(sql)
		result = cursor.fetchall()
		print "+-----------------------+"
		for row in result:
			if event == "status":
				print "| "+str(row[0])+", RANK:"+str(row[1])+", LP:"+str(row[2])+"/"+str(row[3])+", EXP:"+str(row[4])+"/"+str(row[5])+", POP:"+str(row[6])+" |"
			else:
				print "| "+str(row[0])+", "+str(row[1])+", "+str(row[2])+", "+str(row[3])+", "+str(row[4])+" |"
		print "+-----------------------+"

		## DB commit and close
		connector.commit()
		cursor.close()
		connector.close()


	except MySQLdb.Error, e:
		try:
			print "MySQL Error [%d]: %s" % (e.args[0], e.args[1])
		except IndexError:
			print "MySQL Error: %s" % str(e)





##########
## main ##
##########
if __name__=="__main__":

	filename = get_tweet_sc()
	#filename = "tweetsc.jpg"
	#filename = "sc-ipad.png"
	#filename = "scsample-1.jpg"
	#filename = "scsample-2.jpg"
#	filename = "scsample-3.jpg"


	if filename != 0:
		trim_frame_by_SC(filename)
		analyze_LP("only_apl.jpg")
		update_statusTable()
#		analyze_eventSC("only_apl.jpg")

#	update_eventTable("sm25")

	tweet_lp()

	print "manage_sif.py end\n"

